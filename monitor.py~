#!/usr/bin/env python
import os
import sys
import time
import math
import operator
import tempfile
import threading

from PIL import Image

import pymouse


class Listen(pymouse.PyMouseEvent):

    def __init__(self, *args, **kwargs):
        super(Listen, self).__init__(*args, **kwargs)
        self.compare = Compare(self.callback)
        self.press = None
        self.mouse = pymouse.PyMouse()

    def click(self, x, y, button, press):
        if button == 9:
            if press is True:
                self.press = True
                self.compare.start()
            elif press is False:
                self.press = False
                self.compare.stop()

    def escape(self, event):
        return False

    def callback(self):
        print '\n    | CLICK{0}'.format(self.mouse.position())
        self.mouse.press(*self.mouse.position())
        while self.press:
            pass
        self.mouse.release(*self.mouse.position())


class Compare(object):

    def __init__(self, callback, tolerance=1.8, start_delay=0,
                 callback_delay=0.01, refresh=0.008, size=(20, 20)):

        self.thread = None
        self.event = None

        self.callback = callback
        self.tolerance = tolerance
        self.start_delay = start_delay
        self.callback_delay = callback_delay
        self.refresh = refresh

        self.mouse = pymouse.PyMouse()

        self.size = size

    def screenshot(self, path):
        import gtk.gdk
        w = gtk.gdk.get_default_root_window()
        m_x, m_y = self.mouse.position()
        x, y = self.size
        pb = gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGB, False, 8, x, y)

        pb = pb.get_from_drawable(
            w, w.get_colormap(),
            m_x - (x/2),
            m_y - (y/2),
            0,
            0,
            x,
            y
        )
        if pb is not None:
            pb.save(path, "jpeg")
            return path

    @classmethod
    def diff(cls, f1, f2):

        h1 = Image.open(f1).histogram()
        h2 = Image.open(f2).histogram()

        return math.sqrt(
            reduce(operator.add, map(lambda a, b: (a - b) ** 2, h1, h2)) / len(
                h1))

    def _compare(self, callback, event):

        time.sleep(self.start_delay)

        A = tempfile.mktemp()
        B = tempfile.mktemp()
        # A = '/home/sam/Desktop/screenshots/A.jpg'
        # B = '/home/sam/Desktop/screenshots/B.jpg'

        try:
            print '\n++ START(tolerance={0})'.format(self.tolerance)
            last = self.screenshot(A)
            while not event.is_set():
                last = self.screenshot(A if last == B else B)
                diff = self.diff(A, B)
                sys.stdout.write('    | {0}                   \r'.format(diff))
                sys.stdout.flush()
                if diff > self.tolerance:
                    sys.stdout.write('    | {0}'.format(diff))
                    sys.stdout.flush()
                    time.sleep(self.callback_delay)
                    callback()
                    break
                time.sleep(self.refresh)
        finally:
            # include whitespace to overwrite whatever was in stdout
            # previously
            print '-- STOP                                                    '
            os.remove(A)
            os.remove(B)

    def start(self):
        if self.thread:
            raise RuntimeError('Already running!')

        self.event = threading.Event()

        self.thread = threading.Thread(
            target=self._compare, args=(self.callback, self.event))
        self.thread.daemon = True
        self.thread.start()

    def stop(self):
        if self.thread is None:
            raise RuntimeError('You must start before you can stop!')
        self.event.set()
        self.thread.join()
        self.thread = None
        self.event = None


if __name__ == '__main__':
    l = Listen()
    l.run()
